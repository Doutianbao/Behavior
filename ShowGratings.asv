function varargout = ShowGratings(varargin)
%ShowGratings Displays square- or sine wave gratings based on the input
%   parameters
% parameterVec = ShowGratings(gratingDims,gratingFrequencies,gratingAngles,gratingSpeeds, gratingDurations, gratingType);
%  Inputs:
% gratingDims - Size of grating matrix
% gratingFrequencies - Vector of spatial frequencies at which to generate
%   grating
% gratingAngles - Vector of angles at which to generate grating (degree units)
% gratingSpeeds - Vector os speeds at which to move grating (given in units of phase offset in degrees)
% gratingDurations - Vector of durations (number of frames) at which to
%   display each grating
% gratingType - 'square' or 'sine';
% Outputs:
% pVec - Parameter vec that shows the timecourse of the different grating
%   parameters. T X 3 matrix
% 
% Avinash Pujala, HHMI, 2016
gDims = [600, 600];
F = 10; % Grating spatial frequency
A = 0; % Grating angle in degrees
V = 1; % Grating velocity in units of phase shift
D = 10; % Duration in seconds
gType = 'square'; % Grating type

if nargin ==1
    gDims = varargin{1};
elseif nargin ==2
    gDims = varargin{1};
    F = varargin{2};
elseif nargin ==3;
    gDims = varargin{1};
    F = varargin{2};
    A = varargin{3};
elseif nargin == 4
    gDims = varargin{1};
    F = varargin{2};
    A = varargin{3};
    V = varargin{4};
elseif nargin == 5
    gDims = varargin{1};
    F = varargin{2};
    A = varargin{3};
    V = varargin{4};
    D = varargin{5};
elseif nargin == 6
    gDims = varargin{1};
    F = varargin{2};
    A = varargin{3};
    V = varargin{4};
    D = varargin{5};
    gType = varargin{6};
elseif nargin > 6
    error('Too many inputs!')
end

if isempty(gDims)
    gDims =[600, 600];
end

if mod(D,1)~=0
    error('Duration must be specified as number of frames, and must be an integer!')
end

count = 0;
pVec = zeros(length(F)*length(A)*length(V)*D,3);
figure
for f = F(:)'
    for a = A(:)'
        for v = V(:)'
            phi = 0:v:360;            
            for phiNum = 1:D
                ind = mod(phiNum-1,numel(phi))+1;                
                G = CreateGrating(gDims,f,phi(ind),a,gType);
                count = count + 1;
                pVec(count,1) = f; 
                pVec(count,2)  = a;
                pVec(count,3)= v;
                cla
                imagesc(G),axis image,colormap(gray)
                axis off
                title(['Frame # ' num2str(count) ', f = ' num2str(f) ', a = ' num2str(a) ', v = ' num2str(v)])
                drawnow
                shg
                pause(0.1)
            end
        end
    end
end

varargout{1} = pVec;
end

function G = CreateGrating(varargin)
% CreateGrating - Create a square- or sinewave grating based on input
%   parameters
% G = CreateGrating(gratingDims,spatialFrequency,phaseOffset,gratingAngle,gratingType)
% Outputs:
% G - Grating with defined input parameters

gDims = varargin{1}; % Dimensions of the grating
f = varargin{2}; % Spatial frequency of the grating
phi = varargin{3}; % Phase offset of the grating
gAngle = varargin{4}; % Angle of the grating
gType = varargin{5}; % Type of grating, square or sine
phi = phi*pi/180; % Convert to radians

lenDiag = ceil(sqrt(sum(gDims.^2)));
x = linspace(0,1,lenDiag);
if strcmpi(gType,'square')
    y = square(2*pi*f*x + phi);
elseif strcmpi(gType,'sine')
    y = sin(2*pi*f*x + phi);
end

[~,G] = meshgrid(x,y);
G= imrotate(G,gAngle,'crop');
xInds = ceil([(size(G,1)-gDims(1))/2, gDims(1)+(size(G,1)-gDims(1))/2]);
yInds = ceil([(size(G,2)-gDims(2))/2, gDims(2)+(size(G,2)-gDims(2))/2]);
G = G(xInds(1):xInds(2)-1,:);
G = G(:,yInds(1):yInds(2)-1);


end